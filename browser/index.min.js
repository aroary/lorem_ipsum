/**************************************************************
 * @file lorem ipsum browser extension for visual studio code *
 * @copyright (c) 2021 aroary                                 *
 * @license MIT                                               *
 **************************************************************/
const vscode = require("vscode"); function changeLanguage(e) { const t = vscode.workspace.getConfiguration("lorem_ipsum"), n = `https://aroary.com/lorem_ipsum/languages/${e}.json`; console.log((new Date).toISOString(), "Getting", n); const a = new XMLHttpRequest; return a.open("GET", n, !0), a.onload = () => { if (a.status >= 200 && a.status < 300) return t.update("language", JSON.parse(a.responseText), !1).then((() => { vscode.window.showInformationMessage(`Language set to ${e}`), console.log((new Date).toISOString(), "Language updated to", e); })), t.get("language"); console.log((new Date).toISOString(), `Error ${a.status}: ${a.statusText}`), vscode.window.showErrorMessage(`Error ${a.status}: ${a.statusText}`); }, a.onerror = () => { console.log((new Date).toISOString(), a.statusText), vscode.window.showErrorMessage("request.statusText"); }, t.get("language"); } const types = [byte, word, sentence, paragraph, page, code]; async function text() { const e = await vscode.window.showQuickPick(["byte", "word", "sentence", "paragraph", "page", "code"], { ignoreFocusOut: !0, matchOnDescription: !0, title: "Type to generate", placeHolder: "Type" }); if (!e) return; var t = await vscode.window.showInputBox({ ignoreFocusOut: !0, placeHolder: "Number of type to generate", validateInput: e => parseInt(e) > 0 ? null : "Please enter a number greater than zero" }); if (!(t = parseInt(t))) return; const n = vscode.window.activeTextEditor; n.edit((a => { n.selections.forEach((n => { a.replace(n, types[e](t)), console.log((new Date).toISOString(), `Generated ${t} ${e}s`); })); })); } async function image() { console.log((new Date).toISOString(), "Generating image"), vscode.window.showErrorMessage("Image generation is not available in the browser yet"); } function language() { const e = new XMLHttpRequest; e.open("GET", "https://aroary.com/lorem_ipsum/languages/languages.csv", !0), e.onload = () => { e.status >= 200 && e.status < 400 ? vscode.window.showQuickPick(e.responseText.split`,`, { ignoreFocusOut: !0, placeHolder: "Language", title: "Select a language" }).then((e => { e && vscode.workspace.name ? changeLanguage(e) : console.log((new Date).toISOString(), "Language update failed"); })) : (console.log((new Date).toISOString(), e.status, e.statusText), vscode.window.showErrorMessage("Error getting languages")); }, e.onerror = () => { console.log((new Date).toISOString(), "Error getting languages"), vscode.window.showErrorMessage("Error getting languages"); }, e.send(); } const commands = [{ execute: text, name: "text" }, { execute: image, name: "image" }, { execute: language, name: "language" }]; function generate(e) { const t = vscode.workspace.getConfiguration("lorem_ipsum").get("language"); return new Array(e).fill(void 0).map((() => t[Math.floor(Math.random() * t.length)])); } function byte(e) { for (var t = []; t.join` `.length < e;)t.push(generate(1)[0]); return " " === (t = t.join` `.slice(0, -(t.join` `.length - e)))[t.length - 1] && (t = t.slice(0, -1) + "abcdefghijklmnopqrstuvwxyz".split``[26 * Math.random()]), t; } function word(e) { return generate(e).join` `; } function sentence(e) { return new Array(e).fill(void 0).map((() => word(Math.floor(4 * Math.random()) + 16) + ".")).join` `; } function paragraph(e) { return new Array(e).fill(void 0).map((() => sentence(Math.floor(3 * Math.random()) + 5))).join`\n`; } function page(e) { return new Array(e).fill(void 0).map((() => paragraph(Math.floor(3 * Math.random()) + 5))).join`\n\n`; } function code(e) { var t = generate(e); switch (vscode.window.activeTextEditor.document.languageId) { case "plaintext": default: t = t.join`\n`; break; case "xml": case "html": t = `<ul>\n\t<li>${t.join`</li>\n\t<li>`}</li>\n</ul>`; break; case "php": t = `array("${t.join`", "`}")`; break; case "javascript": case "typescript": case "json": t = `[\n\t"${t.join`",\n\t"`}"\n]`; break; case "go": case "java": case "cpp": case "c": t = `{"${t.join`", "`}"}`; break; case "sql": t = `ARRAY["${t.join`", "`}"]`; break; case "markdown": t = `- ${t.join`\n- `}`; break; case "ini": t = `array[] = ${t.join`\narray[] = `}`; break; case "shellscript": t = `(${t.join` `})`; break; case "bat": t = `${t.join` `}`; break; case "ruby": t = `%w("${t.join`, `}")`; break; case "haskell": case "rust": case "python": t = `["${t.join`", "`}"]`; break; case "perl": t = `("${t.join`", "`}")`; break; case "csharp": t = `{ "${t.join`", "`}"; } `; break; case "powershell": t = `@("${t.join`", "`}")`; }return t; } function activate(e) { console.log((new Date).toISOString(), "lorem_ipsum extension activating"), commands.forEach((t => { console.log((new Date).toISOString(), `registering command ${t.name}`), e.subscriptions.push(vscode.commands.registerCommand("lorem_ipsum." + t.name, t.execute)); })), console.log((new Date).toISOString(), "lorem_ipsum extension activated"); } function deactivate() { console.log((new Date).toISOString(), "lorem_ipsum extension deactivating"), console.log((new Date).toISOString(), "lorem_ipsum extension deactivated"); } module.exports = { activate: activate, deactivate: deactivate };