const vscode = require("vscode"), lat = ["maxime", "mollitia", "molestiae", "quas", "vel", "repudiandae", "consequuntur", "voluptatum", "laborum", "numquam", "blanditiis", "harum", "quisquam", "eius", "sed", "odit", "fugiat", "iusto", "fuga", "praesentium", "optio", "eaque", "rerum", "Provident", "similique", "accusantium", "nemo", "autem", "Veritatis", "obcaecati", "tenetur", "iure", "earum", "ut", "molestias", "voluptate", "aliquam", "nihil", "eveniet", "aliquid", "culpa", "officia", "aut", "Impedit", "sit", "quaerat", "nesciunt", "ipsum", "debitis", "reprehenderit", "quia", "quo", "neque", "Ipsa", "eos", "sapiente", "officiis", "at", "excepturi", "expedita", "sint", "Sed", "quibusdam", "recusandae", "alias", "error", "adipisci", "amet", "Perspiciatis", "dolorem", "Officiis", "voluptates", "a", "cumque", "velit", "tempora", "Sit", "fugit", "doloribus", "temporibus", "enim", "commodi", "libero", "magni", "deleniti", "quod", "quam", "hic", "doloremque", "provident", "consectetur", "veniam", "ad", "omnis", "saepe", "voluptas", "pariatur", "est", "explicabo", "dolorum", "eligendi", "cupiditate", "maiores", "labore", "suscipit", "Nulla", "placeat", "Voluptatem", "non", "architecto", "ab", "laudantium", "modi", "minima", "sunt", "esse", "totam", "ratione", "exercitationem", "Possimus", "quis", "quasi", "qui", "corporis"], randomItem = e => e[Math.floor(Math.random() * e.length)], validateInput = e => isNaN(e) ? "Please enter a number" : e > 1e5 ? "Number too high" : null; function generate(e) { const t = getLanguageData(), a = []; for (; a.length < e;)a.push(randomItem(t)); return a; } function getLanguageData(e = null) { const t = vscode.workspace.getConfiguration("lorem_ipsum"); if (!e) return t.get("language") || lat; { const a = `https://aroary.com/lorem_ipsum/languages/${e}.json`; console.log((new Date).toISOString(), "Getting", a); const o = new XMLHttpRequest; o.open("GET", a, !0), o.onload = (() => { if (o.status >= 200 && o.status < 300) return t.update("language", JSON.parse(o.responseText), !1).then(() => { vscode.window.showInformationMessage(`Language set to ${e}`), console.log((new Date).toISOString(), "Language updated to", e); }), t.get("language"); console.log((new Date).toISOString(), `Error ${o.status}: ${o.statusText}`), vscode.window.showErrorMessage(`Error ${o.status}: ${o.statusText}`); }), o.onerror = (() => { console.log((new Date).toISOString(), o.statusText), vscode.window.showErrorMessage("request.statusText"); }); } } async function byte() { var e = await vscode.window.showInputBox({ ignoreFocusOut: !0, placeHolder: "Number of bytes to generate", validateInput: validateInput }); e = parseInt(e); for (var t = []; t.join` `.length < e;)t.push(generate(9).slice(8)[0]); var a = t.join` `.length - e; " " === (t = t.join` `.slice(0, -a))[t.length - 1] && (t = t.slice(0, -1) + random("abcdefghijklmnopqrstuvwxyz".split``)); const o = vscode.window.activeTextEditor; o.edit(e => e.insert(o.selection.active, t)), console.log((new Date).toISOString(), `Generated ${e} bytes`); } async function word() { var e = await vscode.window.showInputBox({ ignoreFocusOut: !0, placeHolder: "Number of words to generate", validateInput: validateInput }); if (!(e = parseInt(e))) return; const t = vscode.window.activeTextEditor; t.edit(a => a.insert(t.selection.active, generate(e).join` `)), console.log((new Date).toISOString(), `Generated ${e} words`); } async function sentence() { var e = await vscode.window.showInputBox({ ignoreFocusOut: !0, placeHolder: "Number of sentences to generate", validateInput: validateInput }); if (!(e = parseInt(e))) return; for (var t = []; t.length < e;)t.push(generate(Math.floor(6 * Math.random()) + 16).slice(8).join` ` + "."); const a = vscode.window.activeTextEditor; a.edit(e => e.insert(a.selection.active, t.join` `)), console.log((new Date).toISOString(), `Generated ${e} sentences`); } async function paragraph() { var e = await vscode.window.showInputBox({ ignoreFocusOut: !0, placeHolder: "Number of paragraphs to generate", validateInput: validateInput }); e = parseInt(e); var t = []; for (let a = 0; a < e; a++) { for (let e = 0; e < Math.floor(3 * Math.random()) + 5; e++)t.push(generate(Math.floor(6 * Math.random()) + 16).slice(8).join` ` + "."); t.push("\n"); } const a = vscode.window.activeTextEditor; a.edit(e => e.insert(a.selection.active, t.join` `.split("\n").map(e => e.trim()).join("\n").trim())), console.log((new Date).toISOString(), `Generated ${e} paragraphs`); } async function page() { var e = await vscode.window.showInputBox({ ignoreFocusOut: !0, placeHolder: "Number of pages to generate", validateInput: validateInput }); e = parseInt(e); var t = []; for (let a = 0; a < e; a++) { for (let e = 0; e < Math.floor(3 * Math.random()) + 5; e++) { for (let e = 0; e < Math.floor(3 * Math.random()) + 5; e++)t.push(generate(Math.floor(6 * Math.random()) + 16).slice(8).join` ` + "."); t.push("\n"); } t.push("\n"); } const a = vscode.window.activeTextEditor; a.edit(e => e.insert(a.selection.active, t.join` `.split("\n").map(e => e.trim()).join("\n").trim())), console.log((new Date).toISOString(), `Generated ${e} pages`); } async function list() { var e = await vscode.window.showInputBox({ ignoreFocusOut: !0, placeHolder: "Number of list items to generate", validateInput: validateInput }); e = parseInt(e); for (var t = []; t.length < e;)t.push(generate(Math.floor(6 * Math.random()) + 16).slice(8).join` ` + "."); const a = vscode.window.activeTextEditor; a.edit(e => e.insert(a.selection.active, t.join`\n`)), console.log((new Date).toISOString(), `Generated ${e} list items`); } const commands = [{ generate: byte, name: "byte" }, { generate: word, name: "word" }, { generate: sentence, name: "sentence" }, { generate: paragraph, name: "paragraph" }, { generate: page, name: "page" }, { generate: list, name: "list" }]; function activate(e) { console.log((new Date).toISOString(), "lorem_ipsum extension activating"), commands.forEach(t => { console.log((new Date).toISOString(), `registering command ${t.name}`), e.subscriptions.push(vscode.commands.registerCommand("lorem_ipsum." + t.name, t.generate)); }), console.log((new Date).toISOString(), "lorem_ipsum extension activated"); } function deactivate() { console.log((new Date).toISOString(), "lorem_ipsum extension deactivating"), console.log((new Date).toISOString(), "lorem_ipsum extension deactivated"); } module.exports = { activate: activate, deactivate: deactivate };